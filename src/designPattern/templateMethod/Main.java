package designPattern.templateMethod;


/**
 * 例子：泡咖啡四个步骤1）将水煮沸2）用沸水冲泡咖啡3）把咖啡倒进杯子里4）加糖和奶
 *       泡茶四个步骤1）将水煮沸2）用沸水浸泡茶叶3）把茶倒进杯子里4）加柠檬
 * 考虑1：单独的两个类咖啡和茶做各自的工作，代码重复太多
 * 考虑2：使用一个抽象类定义第一步和第三步的两个抽象方法，咖啡和茶继承这个方法并实现抽象方法，特有方法第二步和第四步放在各自类中，如果再添加其他类，依旧要实现四个方法，代码复用性差
 * 考虑3：使用一个抽象类定义第二步和第四步的两个抽象方法，并在其中定义两个具体方法第一步和第三步， 咖啡和茶继承这个方法并实现抽象方法且能够调用父类的方法，与考虑2相比，更能精简代码，代码复用性更好
 */
public class Main {
    public static void main(String[] args){
        /**
         * 测试1：
         * 将水煮沸
         * 用沸水冲泡咖啡
         * 将饮料倒入杯中
         * 加糖和奶
         * -------
         * 将水煮沸
         * 用沸水浸泡茶叶
         * 将饮料倒入杯中
         * 加柠檬
         */
        Coffe coffe = new Coffe();
        Tea tea = new Tea();
        coffe.prepareRecipe();
        System.out.println("-------");
        tea.prepareRecipe();





    }
}
